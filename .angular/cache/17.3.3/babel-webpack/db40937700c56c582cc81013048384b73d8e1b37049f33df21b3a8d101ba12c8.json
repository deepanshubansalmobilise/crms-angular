{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/app-menus.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = (a0, a1) => ({\n  \"active\": a0,\n  \"has-sub\": a1\n});\nconst _c1 = a0 => ({\n  \"active\": a0\n});\nfunction TopMenuComponent_ng_template_2_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelement(1, \"img\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate(\"src\", menu_r1.img, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelement(1, \"i\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", menu_r1.icon);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_span_4_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r1 = i0.ɵɵnextContext(3).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(menu_r1.label);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, TopMenuComponent_ng_template_2_div_0_span_4_span_2_Template, 2, 1, \"span\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", menu_r1.title, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", menu_r1.label);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(menu_r1.badge);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 25);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 25);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 25);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_5_ng_template_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 25);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_5_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"a\", 10)(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_5_ng_template_1_div_4_Template, 1, 0, \"div\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const childmenu2_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(8);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, ctx_r2.isActive(childmenu2_r2.url)));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"routerLink\", !childmenu2_r2.submenu ? childmenu2_r2.url : null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(childmenu2_r2.title);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", childmenu2_r2.caret);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtemplate(1, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_5_ng_template_1_Template, 5, 6, \"ng-template\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const childmenu1_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", childmenu1_r4.submenu);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"a\", 10)(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_4_Template, 1, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_div_5_Template, 2, 1, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const childmenu1_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(6);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, childmenu1_r4.url && ctx_r2.isActive(childmenu1_r4.url) || childmenu1_r4.submenu && ctx_r2.isChildActive(childmenu1_r4.submenu), childmenu1_r4.submenu));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"routerLink\", !childmenu1_r4.submenu ? childmenu1_r4.url : null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(childmenu1_r4.title);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", childmenu1_r4.caret);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", childmenu1_r4.submenu);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtemplate(1, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_ng_template_1_Template, 6, 8, \"ng-template\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const childmenu_r5 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", childmenu_r5.submenu);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"a\", 10)(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_4_Template, 1, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_div_5_Template, 2, 1, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const childmenu_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, childmenu_r5.url && ctx_r2.isActive(childmenu_r5.url) || childmenu_r5.submenu && ctx_r2.isChildActive(childmenu_r5.submenu), childmenu_r5.submenu));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"routerLink\", !childmenu_r5.submenu ? childmenu_r5.url : null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(childmenu_r5.title);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", childmenu_r5.caret);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", childmenu_r5.submenu);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtemplate(1, TopMenuComponent_ng_template_2_div_0_div_7_ng_template_1_Template, 6, 8, \"ng-template\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", menu_r1.submenu);\n  }\n}\nfunction TopMenuComponent_ng_template_2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"a\", 10);\n    i0.ɵɵtemplate(2, TopMenuComponent_ng_template_2_div_0_div_2_Template, 2, 1, \"div\", 11)(3, TopMenuComponent_ng_template_2_div_0_div_3_Template, 2, 1, \"div\", 12)(4, TopMenuComponent_ng_template_2_div_0_span_4_Template, 3, 2, \"span\", 13)(5, TopMenuComponent_ng_template_2_div_0_div_5_Template, 2, 1, \"div\", 14)(6, TopMenuComponent_ng_template_2_div_0_div_6_Template, 1, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TopMenuComponent_ng_template_2_div_0_div_7_Template, 2, 1, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(8, _c0, menu_r1.url && ctx_r2.isActive(menu_r1.url) || menu_r1.submenu && ctx_r2.isChildActive(menu_r1.submenu), menu_r1.submenu));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"routerLink\", !menu_r1.submenu ? menu_r1.url : null);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", menu_r1.img);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", menu_r1.icon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", menu_r1.title);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", menu_r1.badge);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", menu_r1.caret);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", menu_r1.submenu);\n  }\n}\nfunction TopMenuComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TopMenuComponent_ng_template_2_div_0_Template, 8, 11, \"div\", 8);\n  }\n  if (rf & 2) {\n    const menu_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", !menu_r1.is_divider && !menu_r1.is_header);\n  }\n}\nexport let TopMenuComponent = /*#__PURE__*/(() => {\n  class TopMenuComponent {\n    constructor(appMenuService, router) {\n      this.appMenuService = appMenuService;\n      this.router = router;\n      this.menus = [];\n    }\n    ngOnInit() {\n      this.menus = this.appMenuService.getAppMenus();\n    }\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.handleTopMenuSubMenu();\n        window.addEventListener('resize', () => {\n          if (window.innerWidth >= 768) {\n            var targetElm = document.querySelector('.app-top-menu');\n            if (targetElm) {\n              targetElm.removeAttribute('style');\n            }\n            var targetElm2 = document.querySelector('.app-top-menu .menu');\n            if (targetElm2) {\n              targetElm2.removeAttribute('style');\n            }\n            var targetElm3 = document.querySelectorAll('.app-top-menu .menu-submenu');\n            if (targetElm3) {\n              targetElm3.forEach(elm3 => {\n                elm3.removeAttribute('style');\n              });\n            }\n            this.handleTopMenuMenuFocus();\n          }\n          this.handleTopMenuDrag('.app-top-menu');\n        });\n        if (window.innerWidth >= 768) {\n          this.handleTopMenuMenuFocus();\n          this.handleTopMenuDrag('.app-top-menu');\n        }\n      }, 50);\n    }\n    isActive(path) {\n      return this.router.url === '/' + path;\n    }\n    isChildActive(menus) {\n      var active = false;\n      if (menus.length > 0) {\n        for (let menu of menus) {\n          if (this.router.url === '/' + menu.url) {\n            active = true;\n          }\n        }\n      }\n      return active;\n    }\n    handleTopMenuMenuFocus() {\n      const targetMenu = document.querySelector('.app-top-menu .menu');\n      if (!targetMenu) {\n        return;\n      }\n      const targetMenuStyle = window.getComputedStyle(targetMenu);\n      const bodyStyle = window.getComputedStyle(document.body);\n      const targetCss = bodyStyle.getPropertyValue('direction') === 'rtl' ? 'margin-right' : 'margin-left';\n      const marginLeft = parseInt(targetMenuStyle.getPropertyValue(targetCss));\n      const viewNav = document.querySelector('.app-top-menu');\n      const viewWidth = viewNav ? viewNav.clientWidth : 0;\n      let prevWidth = 0;\n      let speed = 0;\n      let fullWidth = 0;\n      const controlPrevObj = targetMenu.querySelector('.menu-control-start');\n      const controlPrevWidth = controlPrevObj ? controlPrevObj.clientWidth : 0;\n      const controlNextObj = targetMenu.querySelector('.menu-control-end');\n      const controlNextWidth = controlNextObj ? controlNextObj.clientWidth : 0;\n      let controlWidth = 0;\n      const elms = Array.from(document.querySelectorAll('.app-top-menu .menu > .menu-item'));\n      if (elms.length > 0) {\n        let found = false;\n        elms.forEach(function (elm) {\n          if (!elm.classList.contains('menu-control')) {\n            fullWidth += elm.clientWidth;\n            if (!found) {\n              prevWidth += elm.clientWidth;\n            }\n            if (elm.classList.contains('active')) {\n              found = true;\n            }\n          }\n        });\n      }\n      let elm = targetMenu.querySelector('.menu-control.menu-control-end');\n      if (elm && prevWidth !== fullWidth && fullWidth >= viewWidth) {\n        elm.classList.add('show');\n        controlWidth += controlNextWidth;\n      } else if (elm) {\n        elm.classList.remove('show');\n      }\n      elm = targetMenu.querySelector('.menu-control.menu-control-start');\n      if (elm && prevWidth >= viewWidth && fullWidth >= viewWidth) {\n        elm.classList.add('show');\n      } else if (elm) {\n        elm.classList.remove('show');\n      }\n      if (prevWidth >= viewWidth) {\n        const finalScrollWidth = prevWidth - viewWidth + controlWidth;\n        if (bodyStyle.getPropertyValue('direction') !== 'rtl') {\n          targetMenu.style.marginLeft = `-${finalScrollWidth}px`;\n        } else {\n          targetMenu.style.marginRight = `-${finalScrollWidth}px`;\n        }\n      }\n    }\n    handleTopMenuDrag(containerClassName) {\n      const container = document.querySelector(containerClassName);\n      if (!container) {\n        return;\n      }\n      const menu = container.querySelector('.menu');\n      const menuItem = menu ? Array.from(menu.querySelectorAll('.menu-item:not(.menu-control)')) : [];\n      let startX, scrollLeft, mouseDown;\n      let menuWidth = 0;\n      let maxScroll = 0;\n      menuItem.forEach(element => {\n        menuWidth += element.offsetWidth;\n      });\n      container.addEventListener('mousedown', e => {\n        mouseDown = true;\n        startX = e.pageX;\n        scrollLeft = parseInt(menu?.style.marginLeft || '0', 10);\n        maxScroll = window.innerWidth - menuWidth;\n      });\n      container.addEventListener('touchstart', e => {\n        mouseDown = true;\n        const touch = e.targetTouches[0];\n        startX = touch.pageX;\n        scrollLeft = parseInt(menu?.style.marginLeft || '0', 10);\n        maxScroll = window.innerWidth - menuWidth;\n      });\n      container.addEventListener('mouseup', () => {\n        mouseDown = false;\n      });\n      container.addEventListener('touchend', () => {\n        mouseDown = false;\n      });\n      container.addEventListener('mousemove', e => {\n        if (!startX || !mouseDown || !menu) return;\n        if (window.innerWidth < 768) return;\n        e.preventDefault();\n        const x = e.pageX;\n        const walkX = (x - startX) * 1;\n        let totalMarginLeft = scrollLeft + walkX;\n        if (totalMarginLeft <= maxScroll) {\n          totalMarginLeft = maxScroll;\n          const menuControlEnd = menu.querySelector('.menu-control.menu-control-end');\n          if (menuControlEnd) {\n            menuControlEnd.classList.remove('show');\n          }\n        } else {\n          const menuControlEnd = menu.querySelector('.menu-control.menu-control-end');\n          if (menuControlEnd) {\n            menuControlEnd.classList.add('show');\n          }\n        }\n        if (menuWidth < window.innerWidth) {\n          const menuControlStart = menu.querySelector('.menu-control.menu-control-start');\n          if (menuControlStart) {\n            menuControlStart.classList.remove('show');\n          }\n        }\n        if (maxScroll > 0) {\n          const menuControlEnd = menu.querySelector('.menu-control.menu-control-end');\n          if (menuControlEnd) {\n            menuControlEnd.classList.remove('show');\n          }\n        }\n        if (totalMarginLeft > 0) {\n          totalMarginLeft = 0;\n          const menuControlStart = menu.querySelector('.menu-control.menu-control-start');\n          if (menuControlStart) {\n            menuControlStart.classList.remove('show');\n          }\n        } else {\n          const menuControlStart = menu.querySelector('.menu-control.menu-control-start');\n          if (menuControlStart) {\n            menuControlStart.classList.add('show');\n          }\n        }\n        menu.style.marginLeft = totalMarginLeft + 'px';\n      });\n      container.addEventListener('touchmove', e => {\n        if (!startX || !mouseDown || !menu) return;\n        if (window.innerWidth < 768) return;\n        e.preventDefault();\n        const touch = e.targetTouches[0];\n        const x = touch.pageX;\n        const walkX = (x - startX) * 1;\n        let totalMarginLeft = scrollLeft + walkX;\n        if (totalMarginLeft <= maxScroll) {\n          totalMarginLeft = maxScroll;\n          const menuControlEnd = menu.querySelector('.menu-control.menu-control-end');\n          if (menuControlEnd) {\n            menuControlEnd.classList.remove('show');\n          }\n        } else {\n          const menuControlEnd = menu.querySelector('.menu-control.menu-control-end');\n          if (menuControlEnd) {\n            menuControlEnd.classList.add('show');\n          }\n        }\n        if (menuWidth < window.innerWidth) {\n          const menuControlStart = menu.querySelector('.menu-control.menu-control-start');\n          if (menuControlStart) {\n            menuControlStart.classList.remove('show');\n          }\n        }\n        if (maxScroll > 0) {\n          const menuControlEnd = menu.querySelector('.menu-control.menu-control-end');\n          if (menuControlEnd) {\n            menuControlEnd.classList.remove('show');\n          }\n        }\n        if (totalMarginLeft > 0) {\n          totalMarginLeft = 0;\n          const menuControlStart = menu.querySelector('.menu-control.menu-control-start');\n          if (menuControlStart) {\n            menuControlStart.classList.remove('show');\n          }\n        } else {\n          const menuControlStart = menu.querySelector('.menu-control.menu-control-start');\n          if (menuControlStart) {\n            menuControlStart.classList.add('show');\n          }\n        }\n        menu.style.marginLeft = totalMarginLeft + 'px';\n      });\n    }\n    handleTopMenuControlAction(event, direction) {\n      const element = event.currentTarget;\n      const obj = element.closest('.menu');\n      if (!obj) {\n        return;\n      }\n      const objStyle = window.getComputedStyle(obj);\n      const bodyStyle = window.getComputedStyle(document.querySelector('body'));\n      const targetCss = bodyStyle.getPropertyValue('direction') == 'rtl' ? 'margin-right' : 'margin-left';\n      const marginLeft = parseInt(objStyle.getPropertyValue(targetCss), 10);\n      const containerWidth = document.querySelector('.app-top-menu').clientWidth - document.querySelector('.app-top-menu').clientHeight * 2;\n      let totalWidth = 0;\n      let finalScrollWidth = 0;\n      const controlPrevObj = obj.querySelector('.menu-control-start');\n      const controlPrevWidth = controlPrevObj?.clientWidth || 0;\n      const controlNextObj = obj.querySelector('.menu-control-end');\n      const controlNextWidth = controlPrevObj?.clientWidth || 0;\n      const controlWidth = controlPrevWidth + controlNextWidth;\n      const elms = Array.from(obj.querySelectorAll('.menu-item'));\n      if (elms) {\n        elms.forEach(elm => {\n          if (!elm.classList.contains('.menu-control')) {\n            totalWidth += elm.clientWidth;\n          }\n        });\n      }\n      switch (direction) {\n        case 'next':\n          const widthLeftNext = totalWidth + marginLeft - containerWidth;\n          if (widthLeftNext <= containerWidth) {\n            finalScrollWidth = widthLeftNext - marginLeft - controlWidth;\n            setTimeout(() => {\n              obj.querySelector('.menu-control.menu-control-end')?.classList.remove('show');\n            }, 300);\n          } else {\n            finalScrollWidth = containerWidth - marginLeft - controlWidth;\n          }\n          if (finalScrollWidth !== 0) {\n            obj.style.transitionProperty = 'height, margin, padding';\n            obj.style.transitionDuration = '300ms';\n            if (bodyStyle.getPropertyValue('direction') != 'rtl') {\n              obj.style.marginLeft = `-${finalScrollWidth}px`;\n            } else {\n              obj.style.marginRight = `-${finalScrollWidth}px`;\n            }\n            setTimeout(() => {\n              obj.style.transitionProperty = '';\n              obj.style.transitionDuration = '';\n              obj.querySelector('.menu-control.menu-control-start')?.classList.add('show');\n            }, 300);\n          }\n          break;\n        case 'prev':\n          const widthLeftPrev = -marginLeft;\n          if (widthLeftPrev <= containerWidth) {\n            obj.querySelector('.menu-control.menu-control-start')?.classList.remove('show');\n            finalScrollWidth = 0;\n          } else {\n            finalScrollWidth = widthLeftPrev - containerWidth + controlWidth;\n          }\n          obj.style.transitionProperty = 'height, margin, padding';\n          obj.style.transitionDuration = '300ms';\n          if (bodyStyle.getPropertyValue('direction') != 'rtl') {\n            obj.style.marginLeft = `-${finalScrollWidth}px`;\n          } else {\n            obj.style.marginRight = `-${finalScrollWidth}px`;\n          }\n          setTimeout(() => {\n            obj.style.transitionProperty = '';\n            obj.style.transitionDuration = '';\n            obj.querySelector('.menu-control.menu-control-end')?.classList.add('show');\n          }, 300);\n          break;\n      }\n    }\n    handleTopMenuToggle(menus, forMobile = false) {\n      menus.forEach(menu => {\n        menu.onclick = e => {\n          e.preventDefault();\n          if (!forMobile || forMobile && document.body.clientWidth < 768) {\n            const target = menu.nextElementSibling;\n            menus.forEach(m => {\n              const otherTarget = m.nextElementSibling;\n              if (otherTarget && otherTarget !== target) {\n                slideUp(otherTarget);\n                const otherTargetMenuItem = otherTarget.closest('.menu-item');\n                if (otherTargetMenuItem) {\n                  otherTargetMenuItem.classList.remove('expand');\n                  otherTargetMenuItem.classList.add('closed');\n                }\n              }\n            });\n            if (target) {\n              slideToggle(target);\n            }\n          }\n        };\n      });\n    }\n    handleTopMenuSubMenu() {\n      const menuBaseSelector = '.app-top-menu .menu > .menu-item.has-sub';\n      const submenuBaseSelector = ' > .menu-submenu > .menu-item.has-sub';\n      // Menu - Toggle / Collapse\n      const menuLinkSelector = menuBaseSelector + ' > .menu-link';\n      const menus = Array.from(document.querySelectorAll(menuLinkSelector));\n      this.handleTopMenuToggle(menus, true);\n      // Menu - Submenu lvl 1\n      const submenuLvl1Selector = menuBaseSelector + submenuBaseSelector;\n      const submenusLvl1 = Array.from(document.querySelectorAll(submenuLvl1Selector + ' > .menu-link'));\n      this.handleTopMenuToggle(submenusLvl1);\n      // Menu - Submenu lvl 2\n      const submenuLvl2Selector = menuBaseSelector + submenuBaseSelector + submenuBaseSelector;\n      const submenusLvl2 = Array.from(document.querySelectorAll(submenuLvl2Selector + ' > .menu-link'));\n      this.handleTopMenuToggle(submenusLvl2);\n    }\n    static #_ = this.ɵfac = function TopMenuComponent_Factory(t) {\n      return new (t || TopMenuComponent)(i0.ɵɵdirectiveInject(i1.AppMenuService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TopMenuComponent,\n      selectors: [[\"top-menu\"]],\n      decls: 9,\n      vars: 1,\n      consts: [[\"data-bs-theme\", \"dark\", 1, \"app-top-menu\"], [1, \"menu\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"menu-item\", \"menu-control\", \"menu-control-start\"], [\"href\", \"javascript:;\", 1, \"menu-link\", 3, \"click\"], [1, \"fa\", \"fa-angle-left\"], [1, \"menu-item\", \"menu-control\", \"menu-control-end\"], [1, \"fa\", \"fa-angle-right\"], [\"class\", \"menu-item\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"menu-item\", 3, \"ngClass\"], [1, \"menu-link\", 3, \"routerLink\"], [\"class\", \"menu-icon-img\", 4, \"ngIf\"], [\"class\", \"menu-icon\", 4, \"ngIf\"], [\"class\", \"menu-text\", 4, \"ngIf\"], [\"class\", \"menu-badge\", 4, \"ngIf\"], [\"class\", \"menu-caret\", 4, \"ngIf\"], [\"class\", \"menu-submenu\", 4, \"ngIf\"], [1, \"menu-icon-img\"], [3, \"src\"], [1, \"menu-icon\"], [3, \"ngClass\"], [1, \"menu-text\"], [\"class\", \"menu-label ms-5px\", 4, \"ngIf\"], [1, \"menu-label\", \"ms-5px\"], [1, \"menu-badge\"], [1, \"menu-caret\"], [1, \"menu-submenu\"]],\n      template: function TopMenuComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtemplate(2, TopMenuComponent_ng_template_2_Template, 1, 1, \"ng-template\", 2);\n          i0.ɵɵelementStart(3, \"div\", 3)(4, \"a\", 4);\n          i0.ɵɵlistener(\"click\", function TopMenuComponent_Template_a_click_4_listener($event) {\n            return ctx.handleTopMenuControlAction($event, \"prev\");\n          });\n          i0.ɵɵelement(5, \"i\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"div\", 6)(7, \"a\", 4);\n          i0.ɵɵlistener(\"click\", function TopMenuComponent_Template_a_click_7_listener($event) {\n            return ctx.handleTopMenuControlAction($event, \"next\");\n          });\n          i0.ɵɵelement(8, \"i\", 7);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.menus);\n        }\n      },\n      dependencies: [i2.RouterLink, i3.NgClass, i3.NgForOf, i3.NgIf],\n      encapsulation: 2\n    });\n  }\n  return TopMenuComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}